#+title: The Leverage Effect
#+author: Matt Brigida, Ph.D.
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+HTML_HEAD: <style>pre.src{background:#343131;color:white;} </style>
#+PROPERTY: header-args    :exports none
#+PROPERTY: header-args+   :eval no
#+LATEX_HEADER: \addbibresource{references.bib}

The *Leverage Effect* is the observation that the volatility of an asset is decreasing in the asset price.  That is, if an asset falls in price the asset's volatility increases, and if it rises in price the asset's volatility declines.  So another way of saying this is the asset's returns and volatility are negatively correlated.  This is an empirically observed effect, and we are not sure of the cause. There are two main explanations however:

** Leverage Hypothesis

This observation was first made by Fischer Black (of the Black-Scholes model) in a research paper (Black (1976)).  In this paper he coined the /leverage effect/ after his explanation for the phenomena.  Black hypothesized that stock declines increase leverage, and it is the increased leverage which causes the increased volatility.  Note, if a firm doesn't have any debt the leverage effect would still hold given mandatory selling, general, and administrative expenses.

Empirical evidence, however, generally [[https://papers.ssrn.com/sol3/papers.cfm?abstract_id=256109][doesn't support this leverage explanation of the /Leverage Effect/]].  The phenomena tends to occur in down markets, though not when leverage changes for other reasons.  Also, volatility tend to increase more than can be explained by the change in leverage alone.

** Volatility-Feedback Hypothesis

In this hypothesis (in \cite{Campbell_1992}) volatility rises first, and this causes negative returns (which means /expected/ returns increase).  So this hypothesis works in the opposite direction as the leverage hypothesis. 


* A Look at the Data

Below we take a look at the relationship between stock prices and both implied and historical volatility.

We'll use data from Yahoo Finance:

#+begin_src python :session lev :eval no
import yfinance as yf
import pandas as pd
#+end_src

#+RESULTS:


** Implied Volatility

Below we'll take a look at the relationship between changes in the S&P 500 index, and changes in the VIX.  The VIX measures implied volatility in options on the S&P 500.

#+name: get_vix
#+begin_src python :session lev :eval no
vix = yf.Ticker("^VIX")

# get historical market data
vix_hist = vix.history(period="max")
#+end_src

#+RESULTS:

#+name:get_spy
#+begin_src python :session lev :eval no
sp = yf.Ticker("^GSPC")

# get historical market data
sp_hist = sp.history(period="max")
#+end_src

#+RESULTS: get_spy


#+begin_src python :session lev :eval no
vix_hist.to_csv("vix_data.csv")
sp_hist.to_csv("sp_data.csv")
#+end_src

#+RESULTS:
: None

#+begin_src python :session lev
vix_data = pd.read_csv("./vix_data.csv")
sp_data = pd.read_csv("./sp_data.csv")
#+end_src

#+RESULTS:

#+begin_src python :session lev 
vix_data.index = pd.to_datetime(vix_data['Date'])
sp_data.index = pd.to_datetime(sp_data['Date'])
vix_returns = vix_data['Close'].pct_change()[1:]
sp_returns = sp_data['Close'].pct_change()[1:]
returns = pd.concat([sp_returns, vix_returns], axis=1)
returns.dropna(axis = 0, how = 'any', inplace = True)
returns.columns = ['SP500', 'VIX']
#+end_src

#+RESULTS:


#+begin_src python :session lev :eval no
import plotly.express as px
fig = px.scatter(returns, x="SP500", y="VIX", template='plotly_dark')
fig.write_html('./implied_vol.html')
#+end_src

#+RESULTS:
: None

Daily returns from 1/3/1990 to 9/2/2022.

#+begin_export html
<iframe src="./implied_vol.html" width="100%" height="800" style="border:none;">
</iframe>
#+end_export

#+begin_src python :session lev :eval no
from scipy import stats
slope, intercept, r, p, se = stats.linregress(returns['SP500'], returns['VIX'])
#+end_src

#+RESULTS:

In fact, fitting a regression line affords a slope of -4.31, implying a 1% decline in the S&P 500 means a 4.31% increase in the VIX.

** Historical Volatility


*** Scatterplots

To calculate historical volatility we'll group the data by week, and calculate the realized weekly volatility.

#+begin_src python :session lev
returns['date'] = returns.index 
weekly_returns = returns.resample('W', on='date')['SP500'].sum()
weekly_vol = returns.resample('W', on='date')['SP500'].std()
## weekly data------
weekly_data = pd.concat([weekly_returns, weekly_vol], axis=1)
weekly_data.columns = ['returns', 'vol']
weekly_data['lagged_vol'] = weekly_data['vol'].shift(1)
#+end_src

#+RESULTS:


#+begin_src python :session lev :eval no
import plotly.express as px
fig2 = px.scatter(weekly_data, x="returns", y="lagged_vol", template='plotly_dark')
fig2.write_html('./realized_vol.html')
#+end_src

#+RESULTS:
: None

Weekly returns and realized volatility from 1/3/1990 to 9/2/2022.  Scatter plots for both realized volatility and its lag show no relationship with weekly returns. 

#+begin_export html
<iframe src="./realized_vol.html" width="100%" height="800" style="border:none;">
</iframe>
#+end_export

#+begin_src python :session lev :eval no
slope, intercept, r, p, se = stats.linregress(weekly_data['returns'], weekly_data['vol'])
#+end_src

#+RESULTS:

* Modeling the Leverage Effect

Below we'll use the =arch= python package to estimate two asymmetric volatility models.  Since these models allow volatility to react differently depending on the sign of the returns, they allow us to estimate the leverage effect.  

** EGARCH

An EGARCH(1,1) model with normally-distributed innovations takes the form:

$$r_t = \sigma_t\epsilon_t$$

and

$$ln(\sigma_t^2) = (1 - \alpha_1)\alpha_0 + \alpha_1ln(\sigma^2_{t-1})+g(\epsilon_{t-1})$$

where

$$g(\epsilon_{t-1}) = \theta\epsilon_{t-1} + \gamma(|\epsilon_{t-1}| - \sqrt{2/\pi})$$

The ($\gamma + \theta$) and ($\gamma - \theta$) coefficients measure the asymmetry in the response of volatility to $r_{t-1}$.  If volatility increases when an asset price declines, then we'll observe $\theta < 0$. The model is nonlinear so long as $\theta \neq 0$ however.

For further reading [[https://vlab.stern.nyu.edu/docs/volatility/EGARCH][see this documentation on the EGARCH model.]]

We'll use the =arch= python package to estimate the parameters of an EGARCH(1,1) model.

In the [[https://github.com/bashtage/arch/blob/main/arch/univariate/volatility.py][notation of the arch package]]:

$$
\ln\sigma_{t}^{2}=\omega
        +\sum_{i=1}^{p}\alpha_{i}
        \left(\left|e_{t-i}\right|-\sqrt{2/\pi}\right)
        +\sum_{j=1}^{o}\gamma_{j} e_{t-j}
        +\sum_{k=1}^{q}\beta_{k}\ln\sigma_{t-k}^{2}
$$
$$
    \texttt{where } e_{t}=\epsilon_{t}/\sigma_{t}
$$

#+begin_src python :session lev :eval no
from arch import arch_model
from arch.univariate import EGARCH
#+end_src

#+RESULTS:

#+begin_src python :session lev :eval no :results output :exports results
eg = arch_model(weekly_data['returns'] * 100)
eg.volatility = EGARCH(p=1, o=1, q=1)
eg_res = eg.fit(update_freq=5, disp="off")
print(eg_res.summary())
#+end_src

#+RESULTS:
#+begin_example
                     Constant Mean - EGARCH Model Results                     
==============================================================================
Dep. Variable:                returns   R-squared:                       0.000
Mean Model:             Constant Mean   Adj. R-squared:                  0.000
Vol Model:                     EGARCH   Log-Likelihood:               -3571.47
Distribution:                  Normal   AIC:                           7152.95
Method:            Maximum Likelihood   BIC:                           7180.15
                                        No. Observations:                 1705
Date:                Fri, Sep 09 2022   Df Residuals:                     1704
Time:                        18:57:39   Df Model:                            1
                                Mean Model                                
==========================================================================
                 coef    std err          t      P>|t|    95.0% Conf. Int.
--------------------------------------------------------------------------
mu             0.1466  4.038e-02      3.632  2.816e-04 [6.750e-02,  0.226]
                             Volatility Model                             
==========================================================================
                 coef    std err          t      P>|t|    95.0% Conf. Int.
--------------------------------------------------------------------------
omega          0.1220  3.335e-02      3.659  2.532e-04 [5.667e-02,  0.187]
alpha[1]       0.3052  5.434e-02      5.616  1.949e-08   [  0.199,  0.412]
gamma[1]      -0.1913  2.934e-02     -6.519  7.092e-11   [ -0.249, -0.134]
beta[1]        0.9150  2.064e-02     44.322      0.000   [  0.875,  0.955]
==========================================================================

Covariance estimator: robust
#+end_example


In the notation of the =arch= package, $\gamma$ (gamma) is the $\theta$ coefficient in our notation.   We thus see $\gamma$ is a negative and significant -6.52.  This is evidence of the /leverage effect/ in historical data.

Positive returns: $0.305 + (-0.191) = 0.114$
Negative returns: $0.305 - (-0.191) = 0.496$

** GJR-GARCH(1,1)

The GJR-GARCH model also captures the leverage effect.  See [[https://vlab.stern.nyu.edu/docs/volatility/GJR-GARCH][this documentation on the GJR-GARCH model.]]

#+begin_src python :session lev :eval no :results output :exports results
gjr = arch_model(weekly_data['returns'] * 100, p=1, o=1, q=1)
gjr_res = gjr.fit(update_freq=5, disp="off")
print(gjr_res.summary())
#+end_src

#+RESULTS:
#+begin_example
                   Constant Mean - GJR-GARCH Model Results                    
==============================================================================
Dep. Variable:                returns   R-squared:                       0.000
Mean Model:             Constant Mean   Adj. R-squared:                  0.000
Vol Model:                  GJR-GARCH   Log-Likelihood:               -3582.32
Distribution:                  Normal   AIC:                           7174.64
Method:            Maximum Likelihood   BIC:                           7201.85
                                        No. Observations:                 1705
Date:                Fri, Sep 09 2022   Df Residuals:                     1704
Time:                        18:48:37   Df Model:                            1
                                Mean Model                                
==========================================================================
                 coef    std err          t      P>|t|    95.0% Conf. Int.
--------------------------------------------------------------------------
mu             0.1678  4.028e-02      4.166  3.107e-05 [8.883e-02,  0.247]
                              Volatility Model                             
===========================================================================
                 coef    std err          t      P>|t|     95.0% Conf. Int.
---------------------------------------------------------------------------
omega          0.2992  8.227e-02      3.637  2.756e-04    [  0.138,  0.461]
alpha[1]       0.0534  2.876e-02      1.857  6.327e-02 [-2.954e-03,  0.110]
gamma[1]       0.3095  6.753e-02      4.583  4.579e-06    [  0.177,  0.442]
beta[1]        0.7449  4.017e-02     18.543  9.218e-77    [  0.666,  0.824]
===========================================================================

Covariance estimator: robust
#+end_example


* References
